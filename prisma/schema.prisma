// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  accounts   Account[]
  watchlists Watchlist[]
  portfolio  Portfolio[]
  sessions   Session[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "sessions")
}

model Watchlist {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  userId           String            @db.ObjectId
  watchlistTickers WatchlistTicker[]

  user User @relation(fields: [userId], references: [id])
}

model WatchlistTicker {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  watchlistId String @db.ObjectId
  symbol      String
  price       Float?
  change      Float?
  marketCap   Float?
  ivr         Float?

  watchlist Watchlist @relation(fields: [watchlistId], references: [id])
}

model Portfolio {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  account      String     @db.ObjectId
  benchmark_id Contract   @relation(fields: [contractId], references: [id])
  name         String
  userId       String     @db.ObjectId
  baseCurrency String
  positions    Position[]
  balance      Balance[]
  currencies   Currency[]
  user         User       @relation(fields: [userId], references: [id])
  contractId   String     @db.ObjectId
}

model Balance {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  portfolioId String    @db.ObjectId
  currency    String
  quantity    Float
  Portfolio   Portfolio @relation(fields: [portfolioId], references: [id])
}

model Contract {
  id                 String @id @default(auto()) @map("_id") @db.ObjectId
  conId              String @db.ObjectId
  symbol             String
  secType            String
  exchange           String
  currency           String
  name               String
  price              Float?
  bid                Float?
  ask                Float?
  previousClosePrice Float?

  Portfolio Portfolio[]
  Position  Position[]
}

model Currency {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  base        String
  currency    String
  rate        Float
  Portfolio   Portfolio? @relation(fields: [portfolioId], references: [id])
  portfolioId String?    @db.ObjectId
}

model Position {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  contract_id Int?
  Portfolio   Portfolio? @relation(fields: [portfolioId], references: [id])
  portfolioId String?    @db.ObjectId
  Contract    Contract?  @relation(fields: [contractId], references: [id])
  contractId  String?    @db.ObjectId
}
